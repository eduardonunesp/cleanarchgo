// Code generated by mockery v2.42.2. DO NOT EDIT.

package test

import mock "github.com/stretchr/testify/mock"

// MockMailerGW is an autogenerated mock type for the MailerGW type
type MockMailerGW struct {
	mock.Mock
}

type MockMailerGW_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailerGW) EXPECT() *MockMailerGW_Expecter {
	return &MockMailerGW_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: recipient, subject, content
func (_m *MockMailerGW) Send(recipient string, subject string, content string) error {
	ret := _m.Called(recipient, subject, content)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(recipient, subject, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailerGW_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMailerGW_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - recipient string
//   - subject string
//   - content string
func (_e *MockMailerGW_Expecter) Send(recipient interface{}, subject interface{}, content interface{}) *MockMailerGW_Send_Call {
	return &MockMailerGW_Send_Call{Call: _e.mock.On("Send", recipient, subject, content)}
}

func (_c *MockMailerGW_Send_Call) Run(run func(recipient string, subject string, content string)) *MockMailerGW_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMailerGW_Send_Call) Return(_a0 error) *MockMailerGW_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailerGW_Send_Call) RunAndReturn(run func(string, string, string) error) *MockMailerGW_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailerGW creates a new instance of MockMailerGW. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailerGW(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailerGW {
	mock := &MockMailerGW{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
